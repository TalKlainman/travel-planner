# version: '3.8'

# services:
#   # Frontend Service
#   frontend:
#     build:
#       context: ./app/frontend
#     ports:
#       - "80:80"
#     depends_on:
#       - backend
#       - itinerary-service
#       - map-service
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-frontend
#     restart: unless-stopped

#   # Main Backend Service
#   backend:
#     build:
#       context: ./app/backend
#     ports:
#       - "8000:8000"
#     environment:
#       - DATABASE_URL=postgresql://postgres:postgres@postgres-service:5432/traveldb
#       - ITINERARY_SERVICE_URL=http://itinerary-service:8001
#       - MAP_SERVICE_URL=http://map-service:8002
#     depends_on:
#       postgres-service:
#         condition: service_healthy
#       itinerary-service:
#         condition: service_started
#       map-service:
#         condition: service_started
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-backend
#     restart: unless-stopped

#   # Itinerary Generator Microservice
#   itinerary-service:
#     build:
#       context: ./app/itinerary-service
#     ports:
#       - "8001:8001"
#     environment:
#       # - OLLAMA_URL=http://ollama:11434
#       # - OLLAMA_MODEL=llama3.1:8b
#       - DATABASE_URL=postgresql://postgres:postgres@postgres-service:5432/traveldb
#       - GROQ_API_KEY=gsk_kxStIzYr139tUaKDp156WGdyb3FYIfi3pmd50KGtXeX50qtvarX 
#     depends_on:
#       postgres-service:
#         condition: service_healthy
#       # ollama:
#       #   condition: service_started
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-itinerary-service
#     restart: unless-stopped

#   # Map Service Microservice
#   map-service:
#     build:
#       context: ./app/map-service
#     ports:
#       - "8002:8002"
#     environment:
#       - OSM_API_KEY=your_osm_api_key
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-map-service
#     restart: unless-stopped

#   # PostgreSQL Database Microservice
#   postgres-service:
#     image: postgres:14
#     ports:
#       - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=traveldb
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-postgres-service
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres -d traveldb"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 30s

#   # Ollama LLM Service
#   ollama:
#     image: ollama/ollama
#     ports:
#       - "11434:11434"
#     volumes:
#       - ollama_data:/root/.ollama
#     networks:
#       - travel-planner-network
#     container_name: travel-planner-ollama
#     restart: unless-stopped
#     deploy:
#       resources:
#         limits:
#           memory: 8G

# networks:
#   travel-planner-network:
#     driver: bridge

# volumes:
#   postgres_data:
#     driver: local
#   ollama_data:
#     driver: local

version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./app/frontend
    ports:
      - "80:80"
    depends_on:
      - backend
      - itinerary-service
      - map-service
    networks:
      - travel-planner-network
    container_name: travel-planner-frontend
    restart: unless-stopped

  # Main Backend Service
  backend:
    build:
      context: ./app/backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-service:5432/traveldb
      - ITINERARY_SERVICE_URL=http://itinerary-service:8001
      - MAP_SERVICE_URL=http://map-service:8002
    depends_on:
      postgres-service:
        condition: service_healthy
      itinerary-service:
        condition: service_started
      map-service:
        condition: service_started
    networks:
      - travel-planner-network
    container_name: travel-planner-backend
    restart: unless-stopped

  # Itinerary Generator Microservice (using Groq API)
  itinerary-service:
    build:
      context: ./app/itinerary-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-service:5432/traveldb
      - GROQ_API_KEY=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 
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - travel-planner-network
    container_name: travel-planner-itinerary-service
    restart: unless-stopped

  # Map Service Microservice
  map-service:
    build:
      context: ./app/map-service
    ports:
      - "8002:8002"
    environment:
      - OSM_API_KEY=your_osm_api_key
    networks:
      - travel-planner-network
    container_name: travel-planner-map-service
    restart: unless-stopped

  # PostgreSQL Database Microservice
  postgres-service:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=traveldb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel-planner-network
    container_name: travel-planner-postgres-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d traveldb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  travel-planner-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local